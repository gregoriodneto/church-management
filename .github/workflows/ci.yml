name: CI Pipeline

on:
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]

jobs:
    build:
        runs-on: ubuntu-latest

        env:
            POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
            POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}

        steps:
            - name: Checkout codigo
              uses: actions/checkout@v4

            - name: Set up Docker BuildX
              uses: docker/setup-buildx-action@v3

            - name: Set up Docker Compose
              uses: docker/setup-qemu-action@v3

            - name: Criar arquivo .env
              run: |
                echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
                echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
                echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
                echo "DATABASE_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}" >> .env

            - name: Build Docker Compose
              run: docker compose -f docker-compose.yml up -d --build

            - name: Verificar Containers
              run: docker ps

            - name: Esperar o app subir
              run: sleep 10

    deploy:
      runs-on: ubuntu-latest
      needs: build

      steps:
        - name: Checkout codigo
          uses: actions/checkout@v4

        - name: Set up Docker BuildX
          uses: docker/setup-buildx-action@v3

        - name: Set up Docker Compose
          uses: docker/setup-qemu-action@v3
          
        - name: 🔐 Adicionar chave SSH
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa

        - name: 🔄 Enviar arquivos para EC2
          run: |
            rsync -avz --exclude='.git*' --exclude='node_modules' -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/app

        - name: 🚀 Deploy no servidor remoto
          run: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
              echo "Instalar Docker"
              sudo yum update -y
              sudo amazon-linux-extras enable docker
              sudo yum install docker -y
              sudo systemctl start docker
              sudo systemctl enable docker

              echo "Instalar docker-compose"
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
                -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose

              echo "Entrar na pasta do projeto"
              cd /home/${{ secrets.SSH_USER }}/app

              echo "Puxar e rodar o container"
              echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
              echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
              echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
              echo "DATABASE_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}" >> .env
            
              echo "Parar containers antigos"
              sudo docker-compose down --remove-orphans

              echo "Subir containers"
              sudo docker-compose -f docker-compose.yml up -d --build
            EOF
