generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id                String        @id @default(uuid())

  name              String  
  foundationDate    DateTime  
  role              ChurchRole?

  parentChurchId    String?
  parentChurch      Church?       @relation("ChurchRelations", fields: [parentChurchId], references: [id])
  relatedChurches   Church[]      @relation("ChurchRelations")

  addressChurchId   String?       @unique
  address           Address?      @relation("AddressChurch", fields: [addressChurchId], references: [id])

  contactChurchId   String?       @unique   
  contact           Contact?      @relation("ContactChurch", fields: [contactChurchId], references: [id])

  churchFinance     Finance[]     @relation("FinanceChurch")

  churchDiary       Diary?        @relation("ChurchDiary")

  churchMember      Member[]     @relation("ChurchMember")

  churchFinanceSummary     FinanceSummary[]

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Member {
  id                    String        @id @default(uuid())

  name                  String
  dateOfBirth           DateTime
  age                   Int
  churchMember          ChurchMember[]
  churchMinistry        ChurchMinistry[]
  churchDepartament     ChurchDepartament[]

  addressMemberId       String?
  address               Address?      @relation("AddressMember", fields: [addressMemberId], references: [id])

  contactMemberId       String?     
  contact               Contact?      @relation("ContactMember", fields: [contactMemberId], references: [id])

  churchMemberId        String?
  church                Church?      @relation("ChurchMember", fields: [churchMemberId], references: [id])

  memberFinance         Finance[]     @relation("FinanceMember")

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Finance {
  id                    String        @id @default(uuid())

  description           TypeContribution
  value                 Float

  receiverChurchId      String?
  church                Church?       @relation("FinanceChurch", fields: [receiverChurchId], references: [id])

  contributorMemberId   String?
  member                Member?       @relation("FinanceMember", fields: [contributorMemberId], references: [id])

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([receiverChurchId])
  @@index([contributorMemberId])
}

model Diary {
  id                    String        @id @default(uuid())

  churchId              String?       @unique
  church                Church?       @relation("ChurchDiary", fields: [churchId], references: [id])

  diaryEvent            Event[]       @relation("EventDiary")

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Event {
  id                    String        @id @default(uuid())

  title                 String
  description           String
  date                  DateTime
  location              String?
  isPublic              Boolean @default(false)
  type                  TypeEvent[]  
  status                StatusEvent?

  diaryId               String?
  diary                 Diary?       @relation("EventDiary", fields: [diaryId], references: [id])

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Address {
  id                String        @id @default(uuid())

  street            String
  numberStreet      String
  district          String
  city              String
  state             String  

  churchAddress     Church?       @relation("AddressChurch")
  memberAddress     Member[]      @relation("AddressMember")

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Contact {
  id                String        @id @default(uuid())

  numberContact     String[]
  email             String?

  memberContact     Member[]      @relation("ContactMember")
  churchContact     Church?      @relation("ContactChurch")

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model FinanceSummary {
  id              String   @id @default(uuid())
  month           Int
  year            Int
  saldoAnterior   Float
  entradas        Float
  gastos          Float
  saldoMensal     Float
  saldoAtual      Float
  patrimonio      Float

  churchId        String
  church          Church   @relation(fields: [churchId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([month, year, churchId])
}

enum ChurchRole {
  MATRIZ
  SEDE
  CONGREGACAO
  PONTO_DE_PREGACAO
}

enum TypeContribution {
  DIZIMO
  OFERTA
  DIZIMO_NAO_DECLARADO
  DOACOES
  GASTO_MENSAL
}

enum ChurchMember {
  NONE  
  LIDER
  REGENTE
  MUSICO
  PREGADOR  
  LIMPEZA
  FINANCEIRO
  SECRETARIO
}

enum ChurchMinistry {
  NONE
  PASTOR
  EVANGELISTA
  PRESBITERO
  DIACONO
  AUXILIAR
}

enum ChurchDepartament {
  INFANTIL
  ADOLESCENTE
  JOVENS
  ENSINO
  MUSICA
  HOMENS
  MULHERES
}

enum TypeEvent {
  CULTO
  REUNIAO
  FESTA
  ANIVERSARIO
  EVANGELISMO
  VIGILIA
  ESTUDO_BIBLICO
  BATISMO
  SANTA_CEIA
  EVENTO_INFANTIL
  EVENTO_JOVENS
  EVENTO_SENHORAS
}

enum StatusEvent {
  PLANEJADO
  EM_ANDAMENTO
  CONCLUIDO
  CANCELADO
}